Junit 작성 방법
    0. 테스트를 작성할 때는 클래스 동작에 집중해야 하며, 개별 메서드를 테스트한다고 생각하면 안된다.
    1. AAA : Arrange (준비) / Act (실행) / Assert (단언)


        @BeforeClass //@Before와의 차이점은 Before는 매 테스트케이스 마다 실행되지만, BeforeClass는 n개의 테스트 케이스가 있어도 처음 단 한번만 실행된다.
        public static void beforeClass(){}

        @AfterClass //@After와 차이점은 After는 매 테스트케이스마다 실행되지만, AfterClass는 n개의 테스트 케이스가 있어도 마지막 단 한번만 실행됨.
        public static void afterClass(){}

        @Before
        public void xxx(){
        }

        @Test //만일 이 테스트에 @Ignore(message)이 붙어있다면 전체 테스트 실행시 이 케이스는 실행하지 않고 지나간다. message속성은 optional임
        public void answerArithmeticMeanOfTwoNumbers() {
            //준비 : 테스트에서 어떤 것을 하기 위해서는 먼저 테스트 상태 설정
            //준비에서 사전 작업에 해당하는 것은 공통 초기화 역할을 하는 @Before를 사용하여 빼낼 수 있다. (매 테스트케이스마다 초기화 된다.)
            ScoreCollection collection = new ScoreCollection();
            collection.add(() -> 5);
            collection.add(() -> 7);

            //실행 : 검증하려는 코드인 arithmeticMean 메서드 실행
            int actualResult = collection.arithmeticMean();

            //단언 : 기대하는 결과를 assert
            assertThat(actualResult, equalTo(6)); //assertThat(실제 결과, Matcher 객체)

            //사후 작업이 있다면 공통 정리 역할을 하는 @After를 사용하여 뺄 수 있다. 테스트가 실패하더라고 실행된다. try/catch의 finally 같은 ?
              @After를 사용하는 예로, 열려있는 데이터베이스 연결 종료가 있다.
        }

         @After
         public void yyy(){
         }

     2. 단위테스트는 클래스에 대한 지속적이고 믿을 수 있는 문서역할을 해야한다.
            - 따라서 테스트의 이름은 어떤 맥락에서 일련의 행동을 호출했을때 어떤 결과가 나오는지를 알 수 있는 자세한 이름으로 작성이 권고된다.
                권고 양식 1) doingSomeOperationGeneratesSomeResult
                권고 양식 2) someResultOccursUnderSomeCondition
                권고 양식 3) givenSomeContextWhenDoingSomeBehaviorThenSomeResultOccurs   (given-when-then 으로 BDD 양식)
                            or whenDoingSomeBehaviorThenSomeResultOccurs

                ex. attemptToWithdrawTooMuch -> withdrawalOfMoreThanAvailableFundGeneratesError

     3. 테스트를 의미있게 만들기 (아래 작업들을 거쳐서 주석이 없이도 다른 사람이 알아볼 수 있게함이 목적)
            1) 지역변수 이름 개선
            2) 의미 있는 상수 도입
            3) 햄크레스트 단언 사용
            4) 테스트의 단위를 작게 나누어 집중적인 테스트 만들기
            5) 테스트 군더더기들은 도우미 메서드와 @Before 메서드로 이동

        반대로 나쁜 테스트는
            1) 테스트를 사용하는 사람에게 어떤 정보도 주지 못하는 테스트
            2) 산발적으로 실패하는 테스트
            3) 어떤 가치도 증명하지 못하는 테스트
            4) 실행하는데 오래 걸리는 테스트
            5) 코드를 충분히 커버하지 못하는 테스트
            6) 구현과 강하게 결합되어 있는 테스트 (즉, 작은 변화에도 다수의 테스트가 깨짐)
            7) 수많은 설정 고리로 점프하는 난해한 테스트

     4. junit은 내가 코딩한 testcase 순서대로 실행을 보장하지는 않는다.
        - 여기서 주의 할 점은 공통초기화 메서드인 @Before가 여러개 있으면 그 @Before메서드들은 매 테스트 케이스들 보다 먼저 실행은 되겠지만,
          @Before메서드 간의 순서는 보장하지 않는다.




Junit 예외 테스트 방법
   1. @Test의 속성으로 expected = 예외클래스 를 사용하고, 실제 예외가 발생하게 할 수 있는 코드를 구현한다.
           @Test(expected = NullPointerException.class)
           public void throwsNullPointerWhenAccountCreatedWithoutParam(){
              Account account = new Account();
          }

   2. try/catch 사용 하여, 에러가 발생하는 상황에서 fail()을 호출하여 강제로 해당 exception을 발생시켜준다
        ** fail()을 해주지 않으면 오류는 throw 가 되어도 테스트 실패는 발생하지 않는다.
        ** 비어있는 catch블럭 허용됨

        @Test
           public void throwsNullPointerWhenAccountCreatedWithoutParam2(){
              try {
                 Account account = new Account();
                 fail();

              } catch (NullPointerException thrown) {

              }
           }

   3. Junit 커스텀 규칙 사용 - 관점지향프로그래밍인 (AOP, Aspect Oriented Programming)과 유사한 기능을 제공한다.  => @Rule 사용
                * Junit 규칙을 자동으로 테스트 집합에 종단 관심사 (cross-cutting concern : 불변성을 유지하는 관심사)를 부착할 수 있음
                * Junit안에 바로 사용할 수있는 몇가지 규칙들이 있는데 그 중 하나가 ExpectedException 이다.
                *    ExpectedException 사용 방법
                *       1. 테스트 클래스에 ExpectedException을 public 으로 선언하고 @Rule 어노테이션을 부착해야한다.
                *       2. 테스트 케이스에 발생할 수 있는 규칙을 thrown인스턴스를 사용해 알려준다.
                *             thrown.expect(예외클래스);
                *             thrown.expectMessage(예외 발생시 메세지);
                *       3. 마지막으로 예외를 발생시키는 코드를 구현한다.

                @Test
                public void throwsNullPointerWhenAccountCreatedWithoutParam3(){
                    thrown.expect(NullPointerException.class);
                    Account account = new Account();
                }

    4. 검증된 예외를 처리하력 테스트코드에 try/catch 블럭을 넣지 말고 throw한다. 예를 들면,  BufferedWriter 객체를 사용할 때 IOException을 잡아 주어야 하는데 테스트 코드에서는 그냥 throw시킨다
            @Test
            public void readsFromTestFile() throws IOException {
                String filename = "test.txt";
                BufferedWriter writer = new BufferedWriter(new FileWriter(filename));
                writer.write("test data");
                writer.close();
            }

   5. Fishbowl : http://stefanbirkner.github.io/fishbowl/index.html, https://www.codeaffine.com/2014/07/28/clean-junit-throwable-tests-with-java-8-lambdas/


테스트 코드와 프로덕션 코드의 분리
    1. 대부분의 회사는 테스트 코드를 함께 배포하지 않음. 함께 배포하면 JAR 파일이 커진다.
    2. 그러면 테스트 코드를 어떻게 관리 ?
        - 테스트를 별도 디렉터리로 분리하지만 프로덕션 코드와 같은 패키지에 넣기 (대부분의 회사가 선택하고 있다)
            :   - src
                    - main
                        - source.java
                - test
                    - main
                        - sourceTest.java
            > 장점
            > 단점
        - 프로덕션 코드의 구조와 유사하게 유지하지만 별도의 디렉토리에 넣기
             : -src
                    - main
                        - source.java
               -test
                    - test
                        - main
                            - sourceTest.java

               > 이렇게 하면 public 인터페이스만 활용하여 코드 작성이 가능한데, 일부는 테스트 코드에서 public 이 아닌 메서드를 호출 시 은닉 원칙에 위배 된다고 생각하기 때문
                 은닉화 된 코드에 구현 세부사항이 있고, 테스트 코드에서 이 은닉화된 부분을 작성하면 구현 세부가 변경이 되면 테스트가 깨지게 된다는 점이 있다.
                 이렇게 되면 소스코드를 조금만 수정해도 많은 테스트 코드들이 깨지게 되고 깨진 테스트 코드를 고치기 위해 시간을 들여야 하기 때문에 저품질로 이어질 가능성이 높다.
                 내부 행위를 테스트 해야한다면 설계에 문제가 있었는지를 고민해 봐야한다, 왜냐면 단일 책임원칙(SRP : Single Responsibility Principle)
                 꼭 private 메서드를 테스트 해야한다면 해당 메서드를 다른 클래스의 public 메서드로 옮겨서 하는 방법도 있다.


Infinitest 는 백그라운드에서 테스트를 항상 실행하는 도구이다. https://infinitest.github.io/

좋은 테스트의 FIRST 속성
    Fast : 빠르다
    Isolated : 고립
    Repeatable : 반복가능
    Self-validating : 스스로 검증 가능
    Timely : 적시

    보통은 구현을 먼저하고 테스트 코드를 작성하는데, 테스트 코드를 먼저 작성하고 구현을 하면 더 좋은 결과를 얻을 수 있는데 이것을 TDD 라고 한다. (Test Driven Development)
    하지만 먼저하든, 나중에 하든 FIRST 원칙을 고수하여 작성하자.